{"version":3,"file":"mono.js","sourceRoot":"","sources":["../../src/vm/mono.ts"],"names":[],"mappings":";;;;;;;;;AACA,AAAO,AAAE,AAAI,AAAkC,AAAK,AAAE,AAAM,AAAc;;;;;;AAC1E,AAAO,AAAE,AAAS,AAAE,AAAM,AAAM,AAEhC,AAAM;;;;MAAqB,AAAQ,AAAS;AAC1C,gBAA6B,AAAwB;AACnD,AAAK,AAAE;AADoB,aAAgB,mBAAhB,AAAgB,AAAQ,AAErD;AAAC;AAED,AAAI,SAAC,AAAY,MAAE,AAAmB,MAAE,AAAqB,SAAE,AAAe,kBAAG,AAAI;AACnF,AAAM,eAAC,AAAI,gDAAC,AAAM,QAAE,CAAC,AAAI,AAAC,MAAC,AAAM,OAAC,AAAI,AAAC,uBACrC,AAAG,KAAE,AAAI,KAAC,AAAgB,oBACvB,AAAO,UACT,AAAe,AAAC,AACrB;AAAC;AAED,AAAK,UAAC,AAAY,MAAE,AAAmB,MAAE,AAAsB,SAAE,AAAgC;AAC/F,AAAM,eAAC,AAAK,iDAAC,AAAM,QAAE,CAAC,AAAI,AAAC,MAAC,AAAM,OAAC,AAAI,AAAC,OAAE,AAAO,SAAE,AAAY,AAAC,AAClE;AAAC;AAED,AAAQ,aAAC,AAAY;AACnB,cAAM,AAAyB,4BAAG,AAAI,KAAC,AAAgB,iBAAC,AAAM,SAAG,AAAC;AAClE,AAAE,AAAC,YAAC,AAAyB,4BAAG,AAAI,KAAC,AAAM,UAAI,AAAI,KAAC,AAAI,KAAC,AAAgB,iBAAC,AAAM,AAAC,YAAK,AAAG,OAAI,AAAI,KAAC,AAAU,WAAC,AAAI,KAAC,AAAgB,AAAC,AAAC,mBAAC,AAAC;AACpI,AAAM,mBAAC,AAAI,KAAC,AAAS,UAAC,AAAyB,AAAC,AAClD;AAAC,AACD,AAAI,eAAC,AAAC;AACJ,AAAM,mBAAC,AAAK,MAAC,AAAQ,SAAC,AAAI,AAAC,AAC7B;AAAC,AACH;AAAC,AACF","sourcesContent":["import { SpawnOptions } from \"child_process\"\nimport { exec, ExecOptions, ExtraSpawnOptions, spawn } from \"builder-util\"\nimport { VmManager } from \"./vm\"\n\nexport class MonoVmManager extends VmManager {\n  constructor(private readonly currentDirectory: string) {\n    super()\n  }\n\n  exec(file: string, args: Array<string>, options?: ExecOptions, isLogOutIfDebug = true): Promise<string> {\n    return exec(\"mono\", [file].concat(args), {\n      cwd: this.currentDirectory,\n      ...options,\n    }, isLogOutIfDebug)\n  }\n\n  spawn(file: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any> {\n    return spawn(\"mono\", [file].concat(args), options, extraOptions)\n  }\n\n  toVmFile(file: string): string {\n    const parentPathLengthWithSlash = this.currentDirectory.length + 1\n    if (parentPathLengthWithSlash < file.length && file[this.currentDirectory.length] === \"/\" && file.startsWith(this.currentDirectory)) {\n      return file.substring(parentPathLengthWithSlash)\n    }\n    else {\n      return super.toVmFile(file)\n    }\n  }\n}"]}
