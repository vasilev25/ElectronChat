{"version":3,"file":"wine.js","sourceRoot":"","sources":["../../src/vm/wine.ts"],"names":[],"mappings":";;;;;;;;;AACA,AAAO,AAAkC,AAAQ,AAAE,AAAM,AAAc;;;;;;AACvE,AAAO,AAAE,AAAS,AAAE,AAAM,AAAM;;;;AAChC,AAAO,AAAK,AAAI,AAAM,AAAM;;;;AAE5B,AAAgB,AAChB,AAAM;MAAqB,AAAQ,AAAS;AAC1C;AACE,AAAK,AAAE,AACT;AAAC;AAED,AAAI,SAAC,AAAY,MAAE,AAAmB,MAAE,AAAqB,SAAE,AAAe,kBAAG,AAAI;AACnF,AAAM,eAAC,AAAQ,oDAAC,AAAI,MAAE,AAAI,MAAE,AAAO,AAAC,AACtC;AAAC;AAED,AAAK,UAAC,AAAY,MAAE,AAAmB,MAAE,AAAsB,SAAE,AAAgC;AAC/F,cAAM,IAAI,AAAK,MAAC,AAAa,AAAC,AAChC;AAAC;AAED,AAAQ,aAAC,AAAY;AACnB,AAAM,eAAC,AAAI,MAAC,AAAK,MAAC,AAAI,KAAC,AAAI,MAAE,AAAI,AAAC,AACpC;AAAC,AACF","sourcesContent":["import { SpawnOptions } from \"child_process\"\nimport { ExecOptions, ExtraSpawnOptions, execWine } from \"builder-util\"\nimport { VmManager } from \"./vm\"\nimport * as path from \"path\"\n\n/** @internal */\nexport class WineVmManager extends VmManager {\n  constructor() {\n    super()\n  }\n\n  exec(file: string, args: Array<string>, options?: ExecOptions, isLogOutIfDebug = true): Promise<string> {\n    return execWine(file, args, options)\n  }\n\n  spawn(file: string, args: Array<string>, options?: SpawnOptions, extraOptions?: ExtraSpawnOptions): Promise<any> {\n    throw new Error(\"Unsupported\")\n  }\n\n  toVmFile(file: string): string {\n    return path.win32.join(\"Z:\", file)\n  }\n}\n"]}
