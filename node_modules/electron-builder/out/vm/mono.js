"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MonoVmManager = undefined;

var _builderUtil;

function _load_builderUtil() {
    return _builderUtil = require("builder-util");
}

var _vm;

function _load_vm() {
    return _vm = require("./vm");
}

class MonoVmManager extends (_vm || _load_vm()).VmManager {
    constructor(currentDirectory) {
        super();
        this.currentDirectory = currentDirectory;
    }
    exec(file, args, options, isLogOutIfDebug = true) {
        return (0, (_builderUtil || _load_builderUtil()).exec)("mono", [file].concat(args), Object.assign({ cwd: this.currentDirectory }, options), isLogOutIfDebug);
    }
    spawn(file, args, options, extraOptions) {
        return (0, (_builderUtil || _load_builderUtil()).spawn)("mono", [file].concat(args), options, extraOptions);
    }
    toVmFile(file) {
        const parentPathLengthWithSlash = this.currentDirectory.length + 1;
        if (parentPathLengthWithSlash < file.length && file[this.currentDirectory.length] === "/" && file.startsWith(this.currentDirectory)) {
            return file.substring(parentPathLengthWithSlash);
        } else {
            return super.toVmFile(file);
        }
    }
}
exports.MonoVmManager = MonoVmManager; //# sourceMappingURL=mono.js.map